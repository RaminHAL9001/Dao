Dao-2.0.0.0

A pure Haskell DSL for production-rule-based logic programming and AI.

Dao is a Domain Specific Language (DSL) intended providing tools for logic
programming and constructing knowledge bases, with a focus on artificial
intelligence. The DSL is a dialect of Lisp, but instead of functions being
defined in each module, production rules (pattern -> action) are defined, where
the patterns match some formatted natural language input. There are also
language constructs for assigning dependency information to production rules
which can define the order in which rules are matched to input.

The natural language formatting process is not performed by Dao, it must be
preprocessed by a function that you define for your sepecific use case. There
are combinators for constructing Lisp forms that can be evaluated by the Dao
Lisp interpreter.

Patterns are similar to UNIX "glob" expressions, actions are Dao Lisp forms
which are evaluated by a built-in Lisp interpreter. The Dao dialect does NOT
strictly adhere to any Lisp or Scheme standard language. Instead, combinators
for defining built-in functions are provided which you must define for your
specific use case. Dao Lisp forms and production rules are part of the Dao Lisp
language definition and are parsed automatically.

In this latest version, Dao is a vastly simplified a library which has
outsourced much of the functionality to external packages.

Dao has change quite a lot over the years. Originally a graduate student
project, the goals and target features of the project have been redefined again
and again since it was first released on Hackage. The most consistent goal of
the project has always been to allow programmers to build production-rule-based
systems for understanding natural language. The production rule syntax, the data
structures comprising the database, and the rule execution model have never been
consistent between versions, however since it has not been anything more than an
experimental project with a tiny user base, a complete re-write of the
interpreter and language has not been a problem.
