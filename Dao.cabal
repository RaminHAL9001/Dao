-- "dao.cabal" build configuration for this project.
--
-- Copyright (C) 2015  Ramin Honary.
--
-- Dao is free software: you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation, either version 3 of the License, or (at your
-- option) any later version.
--
-- Dao is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
-- for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program (see the file called "LICENSE"). If not, see
-- <http://www.gnu.org/licenses/agpl.html>.

NAME          : Dao
VERSION       : 2.0.0.0
CABAL-VERSION : >= 1.18
LICENSE       : AGPL
COPYRIGHT     : (C) 2017 Ramin Honary, all rights reserved.
AUTHOR        : Ramin Honary
MAINTAINER    : ramin.honary@gmail.com
BUILD-TYPE    : Simple
SYNOPSIS      : A production rule database protocol and DSL for for natural language modeling and AI.

DESCRIPTION   :
    .
    Dao is a domain-specific language (DSL) for constructing production rule
    database, with a focus on natural language modeling and AI. Production rule
    databases are large stores of (pattern -> action) pairs, where a query is
    matched against all patterns and for every pattern that matches the query,
    an action is performed in response.  The DSL is defined as a Haskell module
    which you import into your project. You must define the built-in functions
    (BIFs) which the database kernel will execute when queries match patterns
    in the database.
    .
    Dao is also a protocol in the Lisp/Scheme family of languages, which I call
    Dao Lisp. Being a protocol, Dao Lisp is intended to be read and written by
    the functions of the Haskell DSL defined in this package. Dao Lisp is not a
    language not intended to be written or read by human programmers, although
    it may be easy for a programmer familiar with Lisp/Scheme to read. As such
    Dao Lisp does not adhere to any Lisp or Scheme standard (not compatible
    with Common Lisp, not compatible with R5RScheme). Dao Lisp is designed
    specifically for modeling production rules for the purpose of simple,
    non-neural-network type artificial intelligence programs, with a focus on
    natural language modeling and interaction.
    .
    The Dao DSL is defined as a Haskell module which you import into your
    project.  You must define Dao Lisp built-in functions (BIFs) that call into
    your project's own code, which the database kernel will then execute when
    queries match patterns in the database. There are also a number of
    primitive types, and a DaoEncode and DaoDecode class, with which you can
    convert to and from your own Haskell data types into Dao data that can be
    computed within the Dao database kernel, much in the same way you would
    convert your Haskell data type to or from JSON data for interaction with a
    web application.
    .
    To use Dao to construct a natural language understanding program (e.g. a
    program that understands plain English), you need to map the words or
    syllables of your natural language to Dao Lisp atoms or strings (there are
    other primitive types besides atoms and strings, including integers,
    dictionaries, lists, and executable functions). You then define patterns,
    which are somewhat similar to UNIX glob patterns, and these patterns will
    match against queries which are simply sequences of atoms and strings. For
    each pattern that matches the query, the associated actions (Lisp
    expressions) are executed in response, although these Lisp expressions are
    simply Lisp function calls that call back into your Haskell program via the
    BIFs you define.
    .
    Pattern-Action pairs are called production rules (or just "Rules"), and can
    be stored into a flat file database which we could call a "production rule
    database" or even a "knowledge base." It is fairly simple to construct
    multiple databases and merge them together at run time.
    .
    Please begin by reading the comments of the
    "src/Language/Interpreter/Dao/GHCI.hs" module, which provides useful
    functions for constructing a production rule database and testing it with
    simple queries. There are also functions for tracing query execution,
    seeing which production rule patterns match the query, and for tracing the
    function execution that construct data, or throw errors, in response to a
    query.
    .
    Dao has change quite a lot over the years. Originally a graduate student
    project, the goals and target features of the project have been redefined
    again and again since it was first released on Hackage. The most consistent
    goal of the project has always been to allow programmers to build
    production-rule-based systems for understanding natural language. The
    production rule syntax, the data structures comprising the database, and
    the rule execution model have never been consistent between versions,
    however since it has not been anything more than an experimental project
    with a tiny user base, a complete re-write of the interpreter and language
    has not been a problem.
    .
    See also, the Dao-examples package published here on the Hackage server:
    https://hackage.haskell.org/package/Dao-examples
    .

Library {

  HS-SOURCE-DIRS   : src
  DEFAULT-LANGUAGE : Haskell2010

  GHC-OPTIONS: -threaded -Wall
    -fno-warn-name-shadowing
    -fno-warn-unused-do-bind

  EXPOSED-MODULES:
    Language.Interpreter.Dao.Kernel
    Language.Interpreter.Dao.GHCI
    Language.Interpreter.Dao

  BUILD-DEPENDS:
    -- minimal dependencies for core modules
      base         >=4.8
    , array        >=0.5
    , attoparsec   >=0.13.2
    , containers   >=0.5
    , mtl          >=2.2
    , fail         >=4.9
    , semigroups   >=0.18
    , text         >=1.2
--  , random-walks >=0.1
--  , token-parser >=0.1
    , transformers >=0.2

  DEFAULT-EXTENSIONS:
    DeriveDataTypeable
    DeriveFunctor
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    ImplicitParams
    LambdaCase
    MultiParamTypeClasses
    OverloadedStrings
    RankNTypes
    ScopedTypeVariables
    StandaloneDeriving
    TemplateHaskell
    TypeFamilies

}

Test-Suite dao-tests {

  TYPE             : exitcode-stdio-1.0
  HS-SOURCE-DIRS   : src
  MAIN-IS          : Language/Interpreter/Dao/TestSuite.hs
  DEFAULT-LANGUAGE : Haskell2010

  GHC-OPTIONS: -threaded -Wall
    -fno-warn-name-shadowing
    -fno-warn-unused-do-bind
    -main-is Language.Interpreter.Dao.TestSuite.main

  OTHER-MODULES:
    Language.Interpreter.Dao.TestSuite
    Language.Interpreter.Dao.Kernel
    Language.Interpreter.Dao

  BUILD-DEPENDS:
    -- minimal dependencies for core modules
      base         >=4.8
    , array        >=0.5
    , attoparsec   >=0.13.2
    , containers   >=0.5
    , directory    >=1.2
    , mtl          >=2.2
    , fail         >=4.9
    , semigroups   >=0.18
    , text         >=1.2
--  , random-walks >=0.1
--  , token-parser >=0.1
    , transformers >=0.2

  DEFAULT-EXTENSIONS:
    DeriveDataTypeable
    DeriveFunctor
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    ImplicitParams
    LambdaCase
    MultiParamTypeClasses
    OverloadedStrings
    RankNTypes
    ScopedTypeVariables
    StandaloneDeriving
    TemplateHaskell
    TypeFamilies

}

