dao.string.compare = $approximate;

END {
	print("(-1)");
}

rule("hello") {
	a = "Hi, how are you.";
	print(a);
	try {
		b = list {"zero", "one", "two"};
		print(b[0]);
	}
	catch err { print(err); }
}

rule "my name is $*." {
	sayHello($1);
}

func testFunc(a, b) {
	print("testFunc:", "a = "+a, "b = "+b);
	print("I am a "+join(a)+" "+join(b)+"!!!");
}

rule "test toplevel $*" {
	print("$0 = "+$0, "$1 = "+$1);
	testFunc($1[0], $1[2]);
}

rule "test recurse" {
	do(list
	   { "fact I am a Banana."
	   , "recall"
	   , "recall again"
	   });
}

rule "fact $*." {
	const.ref = $1;
	print("I understand the fact that "+join($1)+".");
}

rule "recall" {
	print("I recall the fact that "+ join(const.ref));
	try { print("test.ref = "+test.ref); } catch err {}
}

print("test module setup 1");

if(a == 1) {
	print("a == 1");
}

rule "recall another" {
	print("I recall another.");
}

rule "use nothing" {
	a = $use.file;
	delete(a);
	print("No longer using file "+a);
}

rule "test ref" {
	a = $test.ref;
	print(a);
	ref(a) = "hello";
	print(@a);
}

for a in list {"one", "two", "three"} {
	print(global n.m);
	global n.m = a;
	print(a);
}

rule "file $*." {
	try {
		with "/home/ramin/main/dao/tests/1.idea" {
			const.ref = $1;
			print("I understand the fact that "+ join($1) +".");
		}
	}
	catch err { print(err); }
}

EXIT {
	print("test module takedown 1");
}

rule "list files" { print(listOpenFiles()); }
rule "load test file"  { read("./tests/1.idea");  print("Loaded database."); }
rule "save test file"  { write("./tests/1.idea"); print("Saved database.");  }
rule "close test file" { close("./tests/1.idea"); print("Closed database."); }

rule "recall again" {
	print("I recall again.");
}

rule "contents of file" {
	print("Recall file...");
	try {
		with "/home/ramin/main/dao/tests/1.idea" {
			print("I recall the fact that "+ join(const.ref) +".");
		}
	}
	catch err { print(err); }
	print("Recall file...done.");
}

EXIT {
	print("test module takedown 2");
}

rule "test print" {
	print( "HAL:  Good afternoon, Dave."
		 , "DAVE: How are you Hal?"
		 , "HAL:  Everything is running smoothly, and you?"
		 , "DAVE: Oh, not to bad."
		 );
}

print("test module setup 2");

rule "test arith" {
	try {
		print("5 + 8 = "+(5+8));
		print("5 - 8 = "+(5-8));
		print("5 * 8 = "+(5*8));
		print("5 / 8 = "+(5/8));
		print("5.0 / 8.0 = "+(5.0/8.0));
		print("5f / 8f = "+(5f/8f));
		print("5 % 8 = "+(5%8));
		print("5 ** 8 = "+(5**8));
		print("5 | 8 = "+(5|8));
		print("5 & 8 = "+(5&8));
		print("5 ^ 8 = "+(5^8));
		print("5 << 8 = "+(5<<8));
		print("5 >> 8 = "+(5>>8));
	}
	catch err { print(err); }
}

END {
	print("(-0)");
}

rule ("test index $*", "test logic $*") {
	try {
		a = $1[0];
		b = $1[2];
		c = $1[4];
		print("test index (1)");
		if(a == "one" && b != "two" && c == "three") { print("(a == \"one\" && b != \"two\" && c == \"three\")"); }
		print("test index (2)");
		if(!(a != "one" || b != "two") && c == "three") { print("(!(a != \"one\" || b != \"two\") && c == \"three\")"); }
		print("test index (3)");
		if(a == "one" && b == "two" || c != "three") { print("(a == \"one\" && b == \"two\" || c != \"three\")"); }
		print("a = "+a, "b = "+b, "c = "+c);
	}
	catch err { print(err); }
}

rule "test list" {
	print("list test...");
	a = list { 1, 2, 3.56, "DERP!!!" };
	print(a);
	print("list test done.");
}

BEGIN {
	print("(+1)");
}

rule "$? file $*" {
	op = join("", $1);
	a  = join("", $2);
	try {
		if(op=="open" || op=="read")  {
			a = read(a);  print("Read file "+a); use.file = a;
		}
		else if(op=="save" || op=="write")  {
			write(a);  print("Save file "+a);
		}
		else if(op=="close") {
			close(a); print("Close file "+a); delete($use.file);
		}
		else if(op=="use")   {
			use.file = a;
		}
		else {
			print("I don't understand what \""+op+" file\" means.");
		}
		if($use.file) { print("Using file "+a); }
		else { print("Please specify which file to use."); }
	}
	catch err { print("ERROR: "+err); }
}

rule "which file" {
	print(use.file);
}

rule "$* is a kind of $*" {
	try {
		a = use.file;
		print("use file "+a);
		with a { ref($1) = $2; print("OK"); }
	}
	catch err {
		try { ref($1) = $2; print("I guess so."); }
		catch err { print(err); }
	}
}

what.is.count = 0;
rule ("what is an $*?") {
	unanswered = false;
	try {
		if(what.is.count == 0) {
			with use.file {
				a = join("", $1);
				b = ref($1); b = join("", @b);
				print(a+" is a kind of "+@b);
			}
		}
		what.is.count = what.is.count + 1;
	}
	catch err {
		print("I don't know.");
		print(err);
	}
	print("what-is counter = "+what.is.count);
}
END { what.is.count = 0; }

rule("list db", "list dbs") {
	print("Listing loaded idea files");
	listOpenFiles();
}

func sayHello(a) {
	print("Hi, "+ join("", a) +", nice to meet you.");
}

rule "$bad dollar sign" {
	print("matched pattern with bad dollar sign.");
}

rule "infinite recursion" {
	do(list
		{ "my name is Dao."
		, "infinite recursion"
		});
}

