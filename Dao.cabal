-- "dao.cabal" build configuration for this project.
--
-- Copyright (C) 2015  Ramin Honary.
--
-- Dao is free software: you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation, either version 3 of the License, or (at your
-- option) any later version.
--
-- Dao is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
-- for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program (see the file called "LICENSE"). If not, see
-- <http://www.gnu.org/licenses/agpl.html>.

NAME          : Dao
VERSION       : 2.0.0.0
CABAL-VERSION : >= 1.18
LICENSE       : GPL-3
COPYRIGHT     : (C) 2017 Ramin Honary, all rights reserved.
AUTHOR        : Ramin Honary
MAINTAINER    : ramin.honary@gmail.com
BUILD-TYPE    : Simple
SYNOPSIS      : A pure Haskell DSL for production-rule-based logic programming and AI.

DESCRIPTION   : .
                Dao is a Domain Specific Language (DSL) intended providing tools
                for logic programming and constructing knowledge bases, with a
                focus on artificial intelligence. The DSL is a dialect of Lisp,
                but instead of functions being defined in each module,
                production rules (pattern -> action) are defined, where the
                patterns match some formatted natural language input. There are
                also language constructs for assigning dependency information to
                production rules which can define the order in which rules are
                matched to input.
                .
                The natural language formatting process is not performed by Dao,
                it must be preprocessed by a function that you define for your
                sepecific use case. There are combinators for constructing Lisp
                forms that can be evaluated by the Dao Lisp interpreter.
                .
                Patterns are similar to UNIX "glob" expressions, actions are
                Dao Lisp forms which are evaluated by a built-in Lisp
                interpreter. The Dao dialect does NOT strictly adhere to any
                Lisp or Scheme standard language. Instead, combinators for
                defining built-in functions are provided which you must define
                for your specific use case. Dao Lisp forms and production rules
                are part of the Dao Lisp language definition and are parsed
                automatically.
                .
                In this latest version, Dao is a vastly simplified a library
                which has outsourced much of the functionality to external
                packages.
                .
                Dao has change quite a lot over the years. Originally a
                graduate student project, the goals and target features of the
                project have been redefined again and again since it was first
                released on Hackage. The most consistent goal of the project
                has always been to allow programmers to build
                production-rule-based systems for understanding natural
                language. The production rule syntax, the data structures
                comprising the database, and the rule execution model have
                never been consistent between versions, however since it has
                not been anything more than an experimental project with a tiny
                user base, a complete re-write of the interpreter and language
                has not been a problem.
                .

Library {

  HS-SOURCE-DIRS   : src
  DEFAULT-LANGUAGE : Haskell2010

  GHC-OPTIONS: -threaded -Wall
    -fno-warn-name-shadowing
    -fno-warn-unused-do-bind

  EXPOSED-MODULES:
    Language.Interpreter.Dao.Kernel
    Language.Interpreter.Dao.GHCI
    Language.Interpreter.Dao

  BUILD-DEPENDS:
    -- minimal dependencies for core modules
      base         >=4.8
    , array        >=0.5
    , attoparsec   >=0.13.2
    , containers   >=0.5
    , mtl          >=2.2
    , fail         >=4.9
    , semigroups   >=0.18
    , text         >=1.2
--  , random-walks >=0.1
--  , token-parser >=0.1
    , transformers >=0.2

  DEFAULT-EXTENSIONS:
    DeriveDataTypeable
    DeriveFunctor
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    ImplicitParams
    LambdaCase
    MultiParamTypeClasses
    OverloadedStrings
    RankNTypes
    ScopedTypeVariables
    StandaloneDeriving
    TemplateHaskell
    TypeFamilies

}

Test-Suite dao-tests {

  TYPE             : exitcode-stdio-1.0
  HS-SOURCE-DIRS   : src
  MAIN-IS          : Language/Interpreter/Dao/TestSuite.hs
  DEFAULT-LANGUAGE : Haskell2010

  GHC-OPTIONS: -threaded -Wall
    -fno-warn-name-shadowing
    -fno-warn-unused-do-bind
    -main-is Language.Interpreter.Dao.TestSuite.main

  OTHER-MODULES:
    Language.Interpreter.Dao.TestSuite
    Language.Interpreter.Dao.Kernel
    Language.Interpreter.Dao

  BUILD-DEPENDS:
    -- minimal dependencies for core modules
      base         >=4.8
    , array        >=0.5
    , attoparsec   >=0.13.2
    , containers   >=0.5
    , directory    >=1.2
    , mtl          >=2.2
    , fail         >=4.9
    , semigroups   >=0.18
    , text         >=1.2
--  , random-walks >=0.1
--  , token-parser >=0.1
    , transformers >=0.2

  DEFAULT-EXTENSIONS:
    DeriveDataTypeable
    DeriveFunctor
    ExistentialQuantification
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    ImplicitParams
    LambdaCase
    MultiParamTypeClasses
    OverloadedStrings
    RankNTypes
    ScopedTypeVariables
    StandaloneDeriving
    TemplateHaskell
    TypeFamilies

}

