X = 1;
//: before f() started, X was 1: X = 1
println("before f() started, X was 1: X = ", X);
function f(name) {
	println("when ", name, "() was run, X was not changed: X = ", X);
	X += 1;
	println(name, "() then incremented X: X = ", X);
}

Lf = list { f };

D = dict {
	X = 1,
	Y = 1,
	f = global f,
	g = function(name) {
		println("in function ", name, "(), this.X should be 1: this.X = ", this.X);
		println("in function ", name, "(), this.Y should be 1: this.Y = ", this.Y);
		this.X += 1;
		println("in function ", name, "(), this.X was changed to 2: this.X = ", this.X);
		delete(this.Y);
		print("in function ", name, "(), this.Y was deleted ");
		if(defined(this.Y)) { println("(FAILED): this.Y = ", this.Y); }
		else { println("(YES)"); }
	}
};

LD = list { D };

//: when f() was run, X was not changed: X = 1
//: f() then incremented X: X = 2
try { f("f"); }
else { println("f() backtracked"); }
//: after f() finished, X should be 2: X = 2
println("after f() finished, X should be 2: X = ", X);

X = 1;
//: before Lf[0]() started, X was 1: X = 1
println("before Lf[0]() started, X was 1: X = ", X);
//: when Lf[0]() was run, X was not changed: X = 1
//: Lf[0]() then incremented X: X = 2
try { Lf[0]("Lf[0]"); }
else { println("Lf[0]() backtracked"); }
//: after Lf[0]() finished, X was 2: X = 2
println("after Lf[0]() finished, X was 2: X = ", X);

X = 1;
//: before D.f() started, X was 1: X = 1
println("before D.f() started, X was 1: X = ", X);
//: when D.f() was run, X was not changed: X = 1
//: D.f() then incremented X: X = 2
try { D.f("D.f"); }
else { println("D.f() backtracked"); }
//: after D.f() finished, X should be 2: X = 2
println("after D.f() finished, X should be 2: X = ", X);
if(X!=2) { throw ("fail: X != 2"); }

//: before D.g() started, D.X was 1, D.Y was 1: D.X = 1, D.Y = 1
println("before D.g() started, D.X was 1, D.Y was 1: D.X = ", D.X, ", D.Y = ", D.Y);
//: in function D.g(), this.X should be 1: this.X = 1
//: in function D.g(), this.Y should be 2: this.Y = 1
//: in function D.g(), this.X was changed to 2: this.X = 2
//: in function D.g(), this.Y was deleted (YES)
try { D.g("D.g()"); }
else { println("D.g() backtracked"); }
//: after D.g() finished, D.X should be 2, D.X = 1
println("after D.g() finished, D.X should be 2, D.X = ", D.X);
//: after D.g() finished, D.Y should be deleted (YES)
print("after D.g() finished, D.Y should be deleted ");
if(defined(D.Y)) { println("(FAILED): D.Y = ", D.Y); }
else { println("(YES)"); }

