// An example program designed to show how to use the Dao programming language
// to develop a knowledge base that can be programmed with natural language.

END {
	for err in self.errors { println(err); }
}

// -------------------------------------------------------------------------------------------------

reports = list{}; // used to store error reports before deciding what to report.

function report(msg) {
	global reports = global reports + list{msg};
}

ReportHandler = RuleSet {
	rule "$any" { println(join("", any)); }
};

END {
	try { for r in reports { ReportHandler.doAll(r); } } catch err { println(err); }
	reports = list{};
}

// -------------------------------------------------------------------------------------------------

openPrograms = HashMap{};
currentProgram = null;

function openProgram(toks) {
	path = join("", toks);
	if(defined(openPrograms[path])) {
		report("program already open: "+path);
	}
	else {
		openPrograms[path] = DaoProgram(path);
		report("opened program: "+path);
	}
	currentProgram = path;
}

rule "open dao program: $name" { openProgram(name); }

function simpleType(xt) {
	return (xt==IntType || xt==StringType || xt==TypeType || xt=FloatType ||
			xt==TimeType || xt==DiffTimeType || xt==RatioType || xt==ComplexType);
}

function showStruct(S) {
	for x in S {
		xt = typeof(x[1]);
		println(x[0], " = ", xt);
		if(isSimpleType(xt)) { xt=x[1]; }
	}
}

currentPath = "";

function checkCurrentProgram() {
	if(currentProgram) { return true; }
	throw "no current program";
}

function listCurrent() {
	try {
		checkCurrentProgram();
		showStruct(toStruct(@ref("currentProgram"+currentPath)));
	}
	catch err { println(err); }
}
function listCurrent(REF) {
	checkCurrentProgram();
	showStruct(@ref("currentProgram"+join("", REF)));
}
rule "ls" { listCurrent(); }
rule "ls $REF" { listCurrent(REF); }

function changeCurrentPath() { currentPath = ""; }
function changeCurrentPath(REF) {
	next = currentPath + "." + join("", REF);
	if(defined(@ref(next))) { currentProgram = next; }
	else { report("no such location: ", next); }
}
rule "cd" { changeCurrentPath(); }
rule "cd $REF" { changeCurrentPath(REF); }

