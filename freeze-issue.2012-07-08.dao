module "test module"

END {
	print("end processing2");
}

rule "hello" {
	a = "Hi, how are you.";
	print(a);
}

rule "my name is $*." {
	print("Hi, "+ join("", $1) +", nice to meet you.");
}

rule "test recurse" {
	do([ "fact I am a Banana."
	   , "recall"
	   , "recall again"
	   ]);
}

rule "fact $*." {
	${const.ref} = $1;
	print("I understand the fact that "+join($1)+".");
}

rule "recall" {
	print("I recall the fact that "+ join(${const.ref}));
}

SETUP {
	print("test module setup 1");
}

rule "recall another" {
	print("I recall another.");
}

rule "$. file $*" {
	op = join("", $1);
	a  = join("", $2);
	try {	 if(op=="new")   { newDB(a);   print("Created new file "+a); }
		else if(op=="save")  { saveDB(a);  print("Save file "+a); }
		else if(op=="open")  { openDB(a);  print("Open file "+a); }
		else if(op=="close") { closeDB(a); print("Close file "+a); }
		else if(op=="use")   { ${use.file} = a; print("Use file "+a); }
		else { print("I don't understand what \""+op+"\" file means."); }
	}
	catch err { print(err); }
}

rule "use nothing" {
	delete(${use.file});
	print("No longer using file "+${use.file});
}

rule "$* is a kind of $*" {
	try {
		with(@${use.file}) { ref($1) = $2; print("OK"); }
	}
	catch err {
		try { ref($1) = $2; print("I guess so."); }
		catch err { print(err); }
	}
}

rule "file $*." {
	try {
		with "/home/ramin/main/hs/test1.idea" {
			${const.ref} = $1;
			print("I understand the fact that "+ join($1) +".");
		}
	}
	catch err { print(err); }
}

TAKEDOWN {
	print("test module takedown 1");
}

rule "list files" { print(listDBs()); }
rule "load test file" { loadDB("/home/ramin/main/hs/test1.idea"); print("Loaded database."); }
rule "save test file" { saveDB("/home/ramin/main/hs/test1.idea"); print("Saved database."); }

rule "recall again" {
	print("I recall again.");
}

rule "contents of file" {
	print("Recall file...");
	try {
		with "/home/ramin/main/hs/test1.idea" {
			print("I recall the fact that "+ join(${const.ref}) +".");
		}
	}
	catch err { print(err); }
	print("Recall file...done.");
}

TAKEDOWN {
	print("test module takedown 2");
}

rule "test print" {
	print( "HAL:  Good afternoon, Dave."
		 , "DAVE: How are you Hal?"
		 , "HAL:  Everything is running smoothly, and you?"
		 , "DAVE: Oh, not to bad."
		 );
}

SETUP {
	print("test module setup 2");
}

rule "test arith" {
	try {
		print("5 + 8 = "+(5+8));
		print("5 - 8 = "+(5-8));
		print("5 * 8 = "+(5*8));
		print("5 / 8 = "+(5/8));
		print("5.0 / 8.0 = "+(5.0/8.0));
		print("5 % 8 = "+(5%8));
		print("5 ** 8 = "+(5**8));
		print("5 | 8 = "+(5|8));
		print("5 & 8 = "+(5&8));
		print("5 ^ 8 = "+(5^8));
		print("5 << 8 = "+(5<<8));
		print("5 >> 8 = "+(5>>8));
	}
	catch err { print(err); }
}

END {
	print("end processing1");
}

rule "test index $*" {
	try {
		a = $1[0];
		b = $1[2];
		c = $1[4];
		print("a = "+a, "b = "+b, "c = "+c);
		if(a == "one" && b != "two" && c == "three") { print("(a == \"one\" && b != \"two\" && c == \"three\")"); }
		if(!(a != "one" || b != "two") && c == "three") { print("(!(a != \"one\" || b != \"two\") && c == \"three\")"); }
		if(a == "one" && b == "two" || c != "three") { print("(a == \"one\" && b == \"two\" || c != \"three\")"); }
	}
	catch err { print(err); }
}

rule "test list" {
	print("list test...");
	a = [1, 2, 3.56, "DERP!!!"];
	print(a);
	print("list test done.");
}

BEGIN {
	print("start processing");
}

